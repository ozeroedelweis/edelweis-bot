import logging
import asyncio
import time

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties

from config import TOKEN, ADMIN_IDS, BOOKING_URL, RULES_URL, LOCATION_URL, SOCIAL_URL

logging.basicConfig(level=logging.INFO)

class ContactAdmin(StatesGroup):
    waiting_for_message = State()

class Chatting(StatesGroup):
    in_chat = State()

active_chats = {}

main_buttons = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üîó –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ", url=BOOKING_URL)],
    [InlineKeyboardButton(text="üìú –ü—Ä–∞–≤–∏–ª–∞ –æ–∑–µ—Ä–∞", url=RULES_URL)],
    [InlineKeyboardButton(text="üìç –õ–æ–∫–∞—Ü—ñ—è –æ–∑–µ—Ä–∞", url=LOCATION_URL)],
    [InlineKeyboardButton(text="üì∏ –ú–∏ –≤ —Å–æ—Ü–º–µ—Ä–µ–∂–∞—Ö", callback_data="social_links")],
    [InlineKeyboardButton(text="‚úâÔ∏è –ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—î—é", callback_data="contact_admin")]
])

reply_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–æ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)

bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

@dp.message(Command("start"))
@dp.message(F.text.lower() == "–¥–æ –º–µ–Ω—é")
async def start_handler(message: Message):
    await message.answer("üé£ –í—ñ—Ç–∞—î–º–æ –Ω–∞ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ–º—É –±–æ—Ç—ñ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –æ–∑–µ—Ä–∞ –ï–¥–µ–ª—å–≤–µ–π—Å!\n\n–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –æ–ø—Ü—ñ—é –Ω–∏–∂—á–µ ‚¨áÔ∏è",
                         reply_markup=main_buttons)

@dp.callback_query(F.data == "go_home")
async def go_home(callback: CallbackQuery):
    await callback.message.answer("üé£ –í—ñ—Ç–∞—î–º–æ –Ω–∞ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ–º—É –±–æ—Ç—ñ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –æ–∑–µ—Ä–∞ –ï–¥–µ–ª—å–≤–µ–π—Å!\n\n–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –æ–ø—Ü—ñ—é –Ω–∏–∂—á–µ ‚¨áÔ∏è",
                                  reply_markup=main_buttons)
    await callback.answer()

@dp.callback_query(F.data == "social_links")
async def social_links_callback(callback: CallbackQuery):
    text = "üåê –ù–∞—à—ñ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ: (—Ç—É—Ç –∑ º—è–≤–∏—Ç—å—Å—è –≤–∞—à —Ç–µ–∫—Å—Ç)"
    await callback.message.answer(text, reply_markup=reply_keyboard)
    await callback.answer()

@dp.callback_query(F.data == "contact_admin")
async def contact_admin_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úâÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó:", reply_markup=reply_keyboard)
    await state.set_state(ContactAdmin.waiting_for_message)
    await callback.answer()

@dp.message(ContactAdmin.waiting_for_message)
async def handle_user_message(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name

    for admin_id in ADMIN_IDS:
        reply_markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë§ –ü—Ä–∏–π–Ω—è—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é", callback_data=f"take_chat_{user_id}")]
        ])

        if message.photo:
            largest_photo = message.photo[-1]
            await bot.send_photo(admin_id, largest_photo.file_id, caption=f"üì® –§–æ—Ç–æ –≤—ñ–¥ @{username}", reply_markup=reply_markup)
        else:
            text = message.text or "<–Ω–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç>"
            await bot.send_message(admin_id, f"üì® –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ @{username}:\n{text}", reply_markup=reply_markup)

    await message.answer("‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=reply_keyboard)
    await state.clear()

@dp.callback_query(F.data.startswith("take_chat_"))
async def take_chat(callback: CallbackQuery):
    admin_id = callback.from_user.id
    user_id = int(callback.data.split("_")[-1])
    active_chats[admin_id] = user_id

    reply_markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é", callback_data="end_chat")]
    ])

    await callback.message.answer(f"‚úÖ –í–∏ –ø—Ä–∏–π–Ω—è–ª–∏ —á–∞—Ç –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º <code>{user_id}</code>.\n–í—ñ–¥—Ç–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –π–æ–º—É –ø–∏—Å–∞—Ç–∏ –ø—Ä—è–º–æ —Å—é–¥–∏.", reply_markup=reply_markup)
    await callback.answer()

@dp.callback_query(F.data == "end_chat")
async def end_chat(callback: CallbackQuery):
    admin_id = callback.from_user.id
    user_id = active_chats.pop(admin_id, None)

    if user_id:
        try:
            await bot.send_message(user_id, "üîö –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è!", reply_markup=reply_keyboard)
        except:
            pass

    await callback.message.answer("‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", reply_markup=reply_keyboard)
    await callback.answer()

@dp.message(F.from_user.id.in_(ADMIN_IDS))
async def admin_message(message: Message):
    admin_id = message.from_user.id
    user_id = active_chats.get(admin_id)

    if not user_id:
        await message.answer("‚ùó –í–∏ —â–µ –Ω–µ –≤–∏–±—Ä–∞–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ü—Ä–∏–π–Ω—è—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é¬ª.")
        return

    try:
        if message.photo:
            largest_photo = message.photo[-1]
            await bot.send_photo(user_id, largest_photo.file_id, caption="üí¨ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—è", reply_markup=reply_keyboard)
        else:
            await bot.send_message(user_id, f"üí¨ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—è:\n{message.text}", reply_markup=reply_keyboard)
        await message.answer("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
    except Exception:
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

@dp.message()
async def handle_additional_user_message(message: Message):
    user_id = message.from_user.id

    for admin_id, chatting_user in active_chats.items():
        if chatting_user == user_id:
            if message.photo:
                largest_photo = message.photo[-1]
                await bot.send_photo(admin_id, largest_photo.file_id, caption="üì® –§–æ—Ç–æ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", reply_markup=reply_keyboard)
            else:
                await bot.send_message(admin_id, f"üì® –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:\n{message.text}", reply_markup=reply_keyboard)
            return

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
